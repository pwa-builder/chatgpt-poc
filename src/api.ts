import express, { Express, Request, Response } from 'express';
import fetch, { RequestInit } from 'node-fetch';
import { JSDOM } from 'jsdom';
import dotenv from 'dotenv';

import { initOpenAI, askForManifest, askForDescription, askForIcon, manifestPrompt, descriptionPrompt } from './openai.js';
import { OpenAIApi } from 'openai';

dotenv.config();

const app: Express = express();
const port = process.env.PORT || 3000;

app.use(express.json());

let OpenAISesion: OpenAIApi | null = null;

app.get('/initAPI', async (req: Request, res: Response) => {
  OpenAISesion = await initOpenAI();
  if (OpenAISesion){
    res.status(200).send({message: 'LLM initialized'});
  }
  else {
    OpenAISesion = null;
    res.status(500).send({error: 'LLM unavailable'});
  }
});

app.get('/generateManifest', async (req: Request, res: Response) => {
  if (!req.query.url){
    res.status(400).send({error: 'URL not specified'});
    return;
  }
  if (!OpenAISesion){
    res.status(500).send({error: 'API not initialized'});
    return;
  }

  const request = await fetch(req.query.url.toString(),
  {
    headers:{
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.40',
      'Accept-Language': 'en-US'
    }
  });
  let rawHTML = await request.text();
  let headerHTML;

	if (typeof rawHTML === 'string') {
		rawHTML = rawHTML.replace(/\r|\n/g, '').replace(/\s{2,}/g, '');
		headerHTML = /<head>(.*)<\/head>/.test(rawHTML)? (rawHTML.match(/<head>(.*)<\/head>/) as string[])[0] : null;
	}

  if (!headerHTML){
    res.status(400).send({error: '<head> HTML not found'});
    return;
  }
  console.log(`HEAD: ${headerHTML}`);

  const document = new JSDOM(headerHTML).window.document;
  document.querySelectorAll('script').forEach((script) => script?.remove?.());
  document.querySelectorAll('style').forEach((style) => style?.remove?.());
  document.querySelectorAll('meta[http-equiv="origin-trial"],meta[http-equiv="content-type"],meta[name="google-site-verification"]').forEach((meta) => meta?.remove?.());
  document.querySelectorAll('link[rel="stylesheet"],link[rel="modulepreload"],link[rel="preload"],link[rel="dns-prefetch"],link[rel="preload"]').forEach((link) => link?.remove?.());

  const preparedHTML = document.head.innerHTML.replace(/&amp;|&{2,}|<!--(.*?)-->/g, '');

  const manifest = await askForManifest(manifestPrompt(preparedHTML), OpenAISesion) as {description: string};
  let icon = null;
  if (manifest?.description?.length > 0) {
    const description = await askForDescription(descriptionPrompt(manifest.description), OpenAISesion);
    if (description)
      icon = await askForIcon(description, OpenAISesion);
  }
  if (manifest) {
    res.status(200).send({manifest, icon});
  }
  else 
    res.status(400).send({error: 'LLM unavailable or failed to generate manifest'});
});

app.get('/generateManifestLegacy', async (req: Request, res: Response) => {
  if (!req.query.url){
    res.status(400).send({error: 'URL not specified'});
    return;
  }

  const request = await fetch(`https://pwabuilder-manifest-creator.azurewebsites.net/api/create?url=${req.query.url.toString()}`);
  if (request.status != 200){
    res.status(400).send({error: 'pwabuilder API unavailable or failed to generate manifest'});
    return;
  }

  const manifest = await request.json();
  res.status(200).send({manifest});
});

app.post('/generateWinPackage', async (req: Request, res: Response) => {
  return;
  if (!req.body?.manifest){
    res.status(400).send({error: 'Manifest not specified'});
    return;
  }
  if (!req.query?.url){
    res.status(400).send({error: 'URL not specified'});
    return;
  }

  let manifest = null;
  if (typeof req.body.manifest == 'object'){
    manifest =  req.body.manifest;
  } else { 
    res.status(400).send({error: 'Manifest is not a valid JSON'});
    return;
  }

  if (manifest?.icons?.length < 1 || !manifest?.icons[0].sizes) {
    res.status(400).send({error: 'Manifest has no icons'});
    return;
  }

  let payload = {
    "name": (manifest.name || manifest.short_name || "Web Application") as string,
    "packageId":"PWA.ChatGPT.PoC",
    "url": req.query.url,
    "version":"1.0.1",
    "allowSigning":true,
    "publisher":{"displayName":"PWABuilder","commonName":"CN=3a54a224-05dd-42aa-85bd-3f3c1478fdca"},
    "generateModernPackage":true,
    "classicPackage":{"generate":false},
    "edgeHtmlPackage":{"generate":false},
    // giving here the manifest URL to bypass package generator validation, but it's not used
    "manifestUrl": "https://www.khmyznikov.com/pwa-install/manifest.json",
    // giving here the manifest generated by GPT
    "manifest": manifest,
    "images":{"baseImage":manifest.icons[manifest.icons.length - 1].src,"padding":0},
    "resourceLanguage":"en","targetDeviceFamilies":["Desktop"]};

  const options: RequestInit = {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(payload),
  }
  const request = await fetch("https://pwabuilder-winserver.centralus.cloudapp.azure.com/msix/generatezip", options);

  if (request.status == 200){
    res.attachment(`${payload.name.trim()}.zip`);
    request.body?.pipe(res);
  } else { 
    res.status(request.status).send({error: 'Package generation failed'});
    console.log(request.body?.read().toString());
  }

  // res.setHeader('Content-disposition', `attachment; filename=${payload.name.trim()}.zip`);
  
});

app.use('/', express.static('dist/ui'));

app.listen(port, () => {
  console.log(`⚡️[server]: Server is running at http://localhost:${port}`);
});